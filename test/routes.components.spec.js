const knex = require('knex');
const app = require('../src/app');
const config = require('../src/config');
const jwt = require('jsonwebtoken')
const { makeTestComps } = require('./components.fixtures');
const { expect } = require('chai');
const supertest = require('supertest');
const ComponentService = require('../services/service.components');

describe('|Component Routes Test Object|', function() {
    // Prepare Necessary Constants and Variables //
    let db;
    let testComps = makeTestComps();

     // Instantiate Knex Object //
     before('make knex instance', () => {
        db = knex(
            {
                client: "pg",
                connection: config.TEST_DATABASE_URL,
            }
        );
        app.set('db', db);
    })

    // Disconnect and Clean //
    after('disconnect from db', () => db.destroy());
    before('clean table', ()=> db.raw('TRUNCATE components RESTART IDENTITY CASCADE'));
    
    // Begin Assertions //

    // Base Case for each fixture
    describe(`|POST Component | Site: ${testComps.comps[0].name} | /comps/create/:name `, () => { // Log what site is being tested
        it(`should post the component to the database and return with a UAT`, () => { // Try to add the comp to the database
                
            return supertest(app)
            .post(`/api/comps/create/${testComps.comps[0].name}`)
            .send(testComps.comps[0])
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(201)
            .then(res => {
                expect(res.body.comp).to.have.property('id');
                expect(res.body.comp).to.have.property('name');
                expect(res.body.comp).to.have.property('created_at');
                expect(res.body.comp).to.have.property('component_data');
                expect(res.body.comp).to.have.property('updated_at');  // !important - this is generated by the SQL DB - if this fails something is wrong with the DB
            });
        });
    });

    describe(`|GET Component | Site: ${testComps.comps[0].name} | /comps/get/:name `, () => { // Log what site is being tested
        it(`should get the component from the database`, () => { // Try to get the comp to the database
                
            return supertest(app)
            .get(`/api/comps/get/${testComps.comps[0].name}`)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .then(res => {
                expect(res.body.comp[0]).to.have.property('id');
                expect(res.body.comp[0]).to.have.property('name');
                expect(res.body.comp[0]).to.have.property('created_at');
                expect(res.body.comp[0]).to.have.property('component_data');
                expect(res.body.comp[0]).to.have.property('updated_at');  // !important - this is generated by the SQL DB - if this fails something is wrong with the DB
            });
        });
    });

    describe(`|GET Components | /comps/get `, () => { // Log what site is being tested
        it(`should get all the components from the database`, () => { // Try to get the comps from the database
                
            return supertest(app)
            .get(`/api/comps/get`)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .then(res => {
                res.body.comps.forEach(comp => {
                    expect(comp).to.have.property('id');
                    expect(comp).to.have.property('name');
                    expect(comp).to.have.property('created_at');
                    expect(comp).to.have.property('component_data');
                    expect(comp).to.have.property('updated_at');  // !important - this is generated by the SQL DB - if this fails something is wrong with the DB
                });
            });
        });
    });

    describe(`|PATCH Component | Site: ${testComps.comps[0].name} | /comps/update/:name `, () => { // Log what site is being tested
        it(`should update the component and change the name ${testComps.comps[0].name} to ${testComps.updatedComps[0].name}`, () => { // Try to add the site to the database
            return supertest(app)
            .patch(`/api/comps/update/${testComps.comps[0].name}`)
            .set('Accept', 'application/json')
            .send(testComps.updatedComps[0])
            .expect('Content-Type', /json/)
            .expect(200)
            .then(res => {
                expect(res.body.comp).to.have.property('id');
                expect(res.body.comp).to.have.property('name');
                expect(res.body.comp).to.have.property('created_at');
                expect(res.body.comp).to.have.property('component_data');
                expect(res.body.comp).to.have.property('updated_at');  // !important - this is generated by the SQL DB - if this fails something is wrong with the DB
            });
        });
    });

    describe(`|GET Component | Site: ${testComps.updatedComps[0].name} | /comps/delete/:name `, () => { // Log what site is being tested
        it(`should delete the previously updated component from the database`, () => { // Try to add the site to the database
                
            return supertest(app)
            .delete(`/api/comps/delete/${testComps.updatedComps[0].name}`)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(204);
        });
    });
});